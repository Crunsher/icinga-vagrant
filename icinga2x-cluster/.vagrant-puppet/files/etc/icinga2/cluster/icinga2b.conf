/* icinga2b cluster configuration */
library "cluster"

const IcingaNodeName = "icinga2b"

object ClusterListener "icinga2-cluster" {
  // certificate for icinga2b
  ca_path = "/etc/icinga2/pki/ca.crt",
  cert_path = "/etc/icinga2/pki/icinga2b.crt",
  key_path = "/etc/icinga2/pki/icinga2b.key",
  // cluster port for icinga2b
  bind_port = 8888,
  // remote instances array
  peers = [ "icinga2a" ]
}

/* remote instance as seen from icinga2b */
object Endpoint "icinga2a" {
  host = "192.168.33.10",
  port = 8888,
}

/* local instance */
object Endpoint "icinga2b" {
  host = "192.168.33.20",
  port = 8888,

  // This endpoint accepts configuration from the given cluster nodes
  accept_config = [ "icinga2a" ],
}


/* include received configuration from remote cluster nodes */
include_recursive LocalStateDir + "/lib/icinga2/cluster/config"

object IcingaStatusWriter "cluster-status" {}

/* cluster health checks */

template Service "generic-cluster-service" {
  max_check_attempts = 3,
  check_interval = 60s,
  retry_interval = 30s,
  enable_perfdata = true
}

object HostGroup "cluster-node" { }

object Host "icinga2b" {
  display_name = "Health Checks on icinga2b",

  groups = [ "cluster-node" ],
  vars.address = "192.168.33.20",
  check_command = "dummy"
}

apply Service "cluster" {
  import "generic-cluster-service",
  check_command = "cluster",
  check_interval = 5s,
  retry_interval = 1s,
  authorities = [ "icinga2b" ],

  assign where host.name == "icinga2b"
}

apply Service "icinga" {
  import "generic-cluster-service",
  check_command = "icinga",
  authorities = [ "icinga2b" ],

  assign where host.name == "icinga2b"
}
