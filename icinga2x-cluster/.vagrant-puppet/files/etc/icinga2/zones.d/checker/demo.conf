/*
 * Demo configuration for Icinga 2
 * including some hosts, random services
 * notifications, dependencies, etc.
 *
 * Note: These are *examples*, for proper
 * configuration please follow the documentation.
 *
 * The example configuration from icinga2 packages
 * is not included.
 */

const ClusterNotes = "This is the Icinga 2.x Cluster Vagrant Box Demo."

object Host "demo-host" {
  import "demo-host-no-flap-tmpl"
  import "demo-host-realtime-tmpl"

  address = "127.0.0.1"
  address6 = "::1"

  vars.os = "Linux"

  vars.random = [ 1, 2, 3, 4, 5 ]

  vars.services["ping4"] = {
    command = "ping4"
  }
  vars.services["ping6"] = {
    command = "ping4"
  }
  vars.services["disk"] = {
    command = "disk"
  }
  vars.services["disk /"] = {
    command = "disk"
    disk_partition = "/"
  }

  vars.dns_checks["icinga.org"] = {
    dns_lookup = "icinga.org"
  }
  vars.dns_checks["netways.org"] = {
    dns_lookup = "netways.org"
  }

  vars.http_vhosts["/"] = {
    http_uri = "/"
  }
  vars.http_vhosts["Icinga Web 2"] = {
    http_uri = "/icingaweb"
  }
  vars.http_vhosts["www.icinga.org"] = { }
  vars.http_vhosts["wiki.icinga.org"] = { }
  vars.http_vhosts["docs.icinga.org"] = { }
  vars.http_vhosts["dev.icinga.org"] = { }
  vars.http_vhosts["git.icinga.org"] = { }
  vars.http_vhosts["exchange.icinga.org"] = { }
  vars.http_vhosts["demo.icinga.org"] = { }

  vars.notification["mail"] = {
    groups = [ "admins", "manager" ]
  }

  notes = ClusterNotes
}

/* apply some random checks with prefix from host dictionary `random` */
apply Service "random-00" for (check in host.vars.random) {
  import "demo-service-no-flap-tmpl"
  import "demo-service-realtime-tmpl"

  check_command = "demo-random-check"

  assign where host.vars.random
}

/* apply generic services defined in host dictionary `services` */
apply Service for (service => config in host.vars.services) {

  vars.command = "ping4" //default
  vars += config

  check_command = vars.command

  assign where host.vars.services
}

/* apply dns services with prefix from host dictionary `dns_checks` */
apply Service "dns " for (dns_check => config in host.vars.dns_checks) {

  check_command = "dns"

  vars.dns_lookup = "icinga.org" //default
  vars.dns_server = "$address$"

  vars += config

  assign where host.vars.dns_checks
}

/* apply http services with prefix from host dictionary `http_vhosts` */
apply Service "http " for (http_vhost => config in host.vars.http_vhosts) {

  check_command = "http"

  vars.dns_lookup = "icinga.org" //default
  vars.dns_server = "$address$"

  vars += config
  vars.http_vhost = http_vhost

  assign where host.vars.http_vhosts
}


/* apply notifications */
apply Notification "demo-notify-host" to Host {
  import "demo-mail-host-notification"
  command = "demo-mail-host-notification"

  //notify more often - only for demo purposes
  interval = 10m

  //don't define any states or types - we want them all for our demo

  //use the groups dictionary defined on the host
  user_groups = host.vars.notification.mail.groups

  assign where host.vars.notification.mail
  ignore where host.name == "localhost"
}

apply Notification "demo-notify-service" to Service {
  import "demo-mail-service-notification"
  command = "demo-mail-service-notification"

  //notify more often - only for demo purposes
  interval = 1m

  //don't define any states or types - we want them all for our demo

  //use the groups dictionary defined on the host
  user_groups = host.vars.notification.mail.groups

  assign where host.vars.random && host.vars.notification.mail
  ignore where host.name == "localhost"
}

